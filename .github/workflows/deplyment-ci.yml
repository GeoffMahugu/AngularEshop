# This is the production CI Action on Master branch
name: FRONTEND CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master, release/* ]
  pull_request:
    branches: [ master ]
    
env:
  # TODO: Change variable to your image's name.
  IMAGE_NAME: pesaguide-frontend
  REPO_NAME: geoffmahugu/pesaguide-frontend
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  push:
    # The type of runner that the job will run on
    name: Build Project
    runs-on: ubuntu-18.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
      
    - name: Cache Project
      uses: actions/cache@v2
      with:
        path: |
          ~/cache
          !~/cache/exclude
          **/node_modules
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
        
    - name: Build and Package
      uses: docker/build-push-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: geoffmahugu/pesaguide-frontend
        tags: latest
        
    # - name: Build image
    #   run: docker build . --file ./DockerFile --tag $IMAGE_NAME:latest

    # - name: Log into registry
    #   run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

    # - name: Push image
    #   run: |
    #     IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME

    #     # Change all uppercase to lowercase
    #     IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
    #     # Strip git ref prefix from version
    #     VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
    #     # Strip "v" prefix from tag name
    #     [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
    #     # Use Docker `latest` tag convention
    #     [ "$VERSION" == "master" ] && VERSION=latest
    #     echo IMAGE_ID=$IMAGE_ID
    #     echo VERSION=$VERSION
    #     docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
    #     docker push $IMAGE_ID:$VERSION
    
